# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateJobDto {
  applicationDeadline: DateTime!
  description: String!
  location: String!
  organizationId: String!
  salary: String!
  title: String!
  type: JobType!
  visibility: JobVisibility!
}

input CreateOrganizationDto {
  contactEmail: String
  contactPhone: String
  description: String!
  industry: String
  location: String!
  logo: String
  name: String!
  size: String
  website: String
}

input CreateUserDto {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRole!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Job {
  applicationDeadline: DateTime!
  createdAt: DateTime!
  description: String!
  id: ID!
  isActive: Boolean!
  location: String!
  organization: Organization!
  organizationId: String!
  salary: String!
  title: String!
  type: JobType!
  updatedAt: DateTime!
  visibility: JobVisibility!
}

enum JobType {
  CONTRACT
  FULL_TIME
  INTERNSHIP
  PART_TIME
  TEMPORARY
}

enum JobVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Mutation {
  createJob(createJobInput: CreateJobDto!): Job!
  createOrganization(createOrganizationInput: CreateOrganizationDto!): Organization!
  createUser(createUserInput: CreateUserDto!): User!
  deleteJob(id: ID!): Boolean!
  deleteOrganization(id: ID!): Boolean!
  deleteUser(id: ID!): Boolean!
  updateJob(id: ID!, updateJobInput: UpdateJobDto!): Job!
  updateOrganization(id: ID!, updateOrganizationInput: UpdateOrganizationDto!): Organization
  updateUser(id: ID!, updateUserInput: UpdateUserDto!): User
}

type Organization {
  contactEmail: String
  contactPhone: String
  createdAt: DateTime!
  description: String!
  id: ID!
  industry: String
  isActive: Boolean!
  location: String!
  logo: String
  name: String!
  size: String
  updatedAt: DateTime!
  website: String
}

type Query {
  job(id: ID!): Job!
  jobs: [Job!]!
  organization(id: ID!): Organization
  organizations: [Organization!]!
  user(id: ID!): User
  users: [User!]!
}

input UpdateJobDto {
  applicationDeadline: DateTime
  description: String
  isActive: Boolean
  location: String
  organizationId: String
  salary: String
  title: String
  type: JobType
  visibility: JobVisibility
}

input UpdateOrganizationDto {
  contactEmail: String
  contactPhone: String
  description: String
  industry: String
  isActive: Boolean
  location: String
  logo: String
  name: String
  size: String
  website: String
}

input UpdateUserDto {
  bio: String
  email: String
  firstName: String
  lastName: String
  location: String
  password: String
  phoneNumber: String
  profilePicture: String
  role: UserRole
}

type User {
  bio: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean!
  isEmailVerified: Boolean!
  lastName: String!
  location: String
  phoneNumber: String
  profilePicture: String
  role: UserRole!
  updatedAt: DateTime!
}

"""The role of the user in the system"""
enum UserRole {
  ADMIN
  EMPLOYEE
  JOB_SEEKER
  ORGANIZATION
  STUDENT
}